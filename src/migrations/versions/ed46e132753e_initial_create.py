"""Initial create

Revision ID: ed46e132753e
Revises: 
Create Date: 2025-10-26 20:41:22.422300

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID, ARRAY


# revision identifiers, used by Alembic.
revision: str = 'ed46e132753e'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Users
    op.create_table(
        'Users',
        sa.Column('id', UUID(as_uuid=True), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('username', sa.String(), nullable=False),
        sa.Column('password', sa.String(), nullable=False),
        sa.Column('bio', sa.String(), nullable=True),
        sa.Column('image_url', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    # Articles
    op.create_table(
        'Articles',
        sa.Column('id', UUID(as_uuid=True), nullable=False),
        sa.Column('created_by', UUID(as_uuid=True), nullable=False),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('slug', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('body', sa.String(), nullable=False),
        sa.Column('taglist', ARRAY(sa.String()), nullable=True),
        sa.ForeignKeyConstraint(['created_by'], ['Users.id']),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('slug')
    )

    # Comments
    op.create_table(
        'Comments',
        sa.Column('id', UUID(as_uuid=True), nullable=False),
        sa.Column('article_id', UUID(as_uuid=True), nullable=False),
        sa.Column('created_by', UUID(as_uuid=True), nullable=False),
        sa.Column('body', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['article_id'], ['Articles.id']),
        sa.ForeignKeyConstraint(['created_by'], ['Users.id']),
        sa.PrimaryKeyConstraint('id')
    )
    # diagnostic marker to verify execution
    op.execute(sa.text("CREATE TABLE IF NOT EXISTS t2(x int)"))


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Comments')
    op.drop_table('Articles')
    op.drop_table('Users')
    # ### end Alembic commands ###
